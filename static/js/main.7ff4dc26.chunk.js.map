{"version":3,"sources":["ExpenceList.js","card.js","visuals.js","App.js","serviceWorker.js","index.js"],"names":["ExpenceList","updateSum","getExpences","name","window","localStorage","getItem","useState","sum","setSum","expenses","bills","house","car","food","travel","car_loan","value","setValue","handleInputChange","e","newValue","target","parseInt","useEffect","newSum","key","map","expence","className","id","type","toLowerCase","substring","length","placeholder","onChange","React","useRef","Card","getSallary","currentName","childValue","setChildValue","expences2","setExpences","yourSallary","setYourSallary","valueString","JSON","stringify","setItem","class","newSallary","am4core","am4themes_animated","App","sallaryElla","sallaryChrille","setSallary","sallary","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAqEeA,MA9Df,YAAwD,IAAjCC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAG3C,GAFgBC,OAAOC,aAAaC,QAAQ,YAAcH,GAEpCI,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA0BF,mBAAS,CAC/BG,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,IAAK,GACLC,KAAM,GACNC,OAAQ,GACRC,SAAU,KAPd,mBAAOC,EAAP,KAAcC,EAAd,KAYMC,EAAoB,SAAAC,GACtB,IAAMC,EAAWD,EAAEE,OAAOL,MAC1BC,EAAS,2BACFD,GADC,kBAEHG,EAAEE,OAAOnB,KAAOoB,SAASF,MAE9BnB,EAAYe,IAahB,OATAO,qBAAU,WACN,IAAIC,EAAS,EACb,IAAK,IAAIC,KAAOT,EACZQ,GAAUR,EAAMS,GAEpBjB,EAAOgB,GACPxB,EAAUO,MAIV,6BAtBa,CAAE,YAAa,SAAU,SAAU,OAAQ,QAAS,UAAW,aAwB3DmB,KAAI,SAAAC,GAAO,OAChB,yBAAKC,UAAU,WACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,SACf,2BAAOA,UAAU,SAASD,GACtB,yBAAKC,UAAU,WACX,2BACIC,GAAIF,EACJF,IAAKE,EACLC,UAAU,uCACVE,KAAK,OACL5B,KAAMyB,EAAQI,cAAcC,UAAU,EAAGL,EAAQM,OAAQ,GACzDC,YAAaP,EACbQ,SAAUjB,aCxD1CZ,EAAgC8B,IAAhC9B,SAAUiB,EAAsBa,IAAtBb,UAAsBa,IAAXC,OAyDdC,MAvDf,YAAqC,IAArBpC,EAAoB,EAApBA,KAAMqC,EAAc,EAAdA,WAClB,EAAwBjC,EAASJ,GAAzBsC,EAAR,oBACA,EAAsClC,EAAS,GAA/C,mBAAQmC,EAAR,KAAoBC,EAApB,KACA,EAAmCpC,IAAnC,mBAAQqC,EAAR,KAAmBC,EAAnB,KACA,EAAwCtC,EAAS,GAAjD,mBAAQuC,EAAR,KAAqBC,EAArB,KAqBA,OALAvB,GAAU,WACN,IAAMwB,EAAcC,KAAKC,UAAUN,GACnCxC,OAAOC,aAAa8C,QAAQ,YAAcV,EAAaO,KACzD,CAACJ,IAGC,yBAAKf,UAAU,qDACX,yBAAKuB,MAAM,iBACP,yBAAKvB,UAAU,WACX,yBAAKA,UAAU,UACX,uBAAGuB,MAAM,cAAcX,GACvB,uBAAGW,MAAM,cAAT,uBAA2CN,EAAcJ,GACzD,2BAAOb,UAAU,SAAjB,YACA,yBAAKA,UAAU,WACH,2BACIC,GAAIW,EACJf,IAAKe,EACLZ,UAAU,uCACVE,KAAK,OACL5B,KAAK,SACLgC,YAAY,SACZC,SA3BV,SAAAhB,GACtB,IAAMiC,EAAajC,EAAEE,OAAOL,MAC5B8B,EAAeM,GACfb,EAAWM,QA4BC,yBAAKjB,UAAU,UACX,uBAAGA,UAAU,cAAb,kBAA0Ca,KAGlD,kBAAC,EAAD,CAAazC,UA3CP,SAACO,GACfmC,EAAcpB,SAASf,KA0CoBN,YAvC3B,SAACe,GACjB4B,EAAY5B,IAsCyDd,KAAMsC,O,oCChDnFa,IAAiBC,KCqCFC,MAlCf,WACE,IACIC,EACAC,EAFJ,EAAgCnD,mBAAS,GAAzC,mBAAiBoD,GAAjB,WAIAnC,qBAAU,WACRiC,EAAcjB,IACdkB,EAAiBlB,OAGnB,IAAMA,EAAa,SAACoB,GAElBD,EADmBC,IAIrB,OACE,yBAAK/B,UAAU,0BACb,uBAAGA,UAAU,wDAAb,iCACA,yBAAKA,UAAU,WACT,yBAAKA,UAAU,UACZ,kBAAC,EAAD,CAAM1B,KAAK,SAASyD,QAASrC,SAASkC,GAAcjB,WAAYA,KAEnE,yBAAKX,UAAU,UACb,kBAAC,EAAD,CAAM1B,KAAK,QAAQyD,QAASrC,SAASmC,GAAiBlB,WAAYA,QCnB5DqB,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7ff4dc26.chunk.js","sourcesContent":["import React from 'react'\nimport { useState, useEffect, useuseLayoutEffect } from 'react'\nimport updateSum from './card'\nimport bulma from 'bulma'\nimport { getValue } from '@amcharts/amcharts4/.internal/core/utils/Type'\n\n\nfunction ExpenceList({ updateSum, getExpences, name }) {\n    const savedEx = window.localStorage.getItem('Expences ' + name);\n \n    const [sum, setSum] = useState(0)\n    const [value, setValue] = useState({\n        expenses: '',\n        bills: '',\n        house: '',\n        car: '',\n        food: '',\n        travel: '',\n        car_loan: '',        \n    })\n    \n    const expences = [ 'Expenses:', 'Bills:', 'House:', 'Car:', 'Food:', 'Travel:', 'Car_loan:']\n\n    const handleInputChange = e => {\n        const newValue = e.target.value\n        setValue({\n            ...value,\n            [e.target.name]: parseInt(newValue)\n        })\n        getExpences(value);\n    }\n\n    // The sum of the values \n    useEffect(() => {\n        let newSum = 0;\n        for (let key in value) {\n            newSum += value[key]\n        }\n        setSum(newSum)\n        updateSum(sum)\n    })\n      \n    return(\n        <div>\n            {\n                expences.map(expence => \n                    <div className=\"columns\">\n                        <div className=\"column\">    \n                            <div className=\"field\">\n                            <label className=\"label\">{expence}</label>\n                                <div className=\"control\">\n                                    <input \n                                        id={expence} \n                                        key={expence} \n                                        className=\"input is-small is-primary is-rounded\" \n                                        type=\"text\" \n                                        name={expence.toLowerCase().substring(0, expence.length -1)}\n                                        placeholder={expence}\n                                        onChange={handleInputChange} \n                                    />                                \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n        </div>\n    )\n} \n\nexport default ExpenceList; ","import React from 'react'\nimport ExpenceList from './ExpenceList'\nconst { useState, useEffect, useRef } = React; \n\nfunction Card({ name, getSallary }) {\n    const [ currentName ] = useState(name);\n    const [ childValue, setChildValue ] = useState(0); \n    const [ expences2, setExpences ] = useState();\n    const [ yourSallary, setYourSallary ] = useState(0);\n\n    const updateSum = (sum) => {\n        setChildValue(parseInt(sum));\n    }\n\n    const getExpences = (value) => {\n        setExpences(value);\n    }\n\n    const handleInputChange = e => {\n        const newSallary = e.target.value;\n        setYourSallary(newSallary);\n        getSallary(yourSallary);\n    }\n\n    useEffect(() => {\n        const valueString = JSON.stringify(expences2)\n        window.localStorage.setItem('Expences ' + currentName, valueString);\n    },[expences2])\n\n    return (\n        <div className=\"card has-margin-1 has-padding-2 has-border-radius\">\n            <div class=\"media-content\">     \n                <div className=\"columns\">\n                    <div className=\"column\">\n                        <p class=\"title is-4\">{currentName}</p>\n                        <p class=\"title is-6\">What you have left: {yourSallary - childValue}</p>     \n                        <label className=\"label\">Sallary:</label>\n                        <div className=\"control\">\n                                    <input \n                                        id={currentName} \n                                        key={currentName} \n                                        className=\"input is-small is-primary is-rounded\" \n                                        type=\"text\" \n                                        name=\"Lön\"\n                                        placeholder=\"Lön\"\n                                        onChange={handleInputChange} \n                                    />                                \n                                </div>\n                    </div>\n                    <div className=\"column\">\n                        <p className=\"title is-6\">You're paying: {childValue}</p>\n                    </div>\n                </div>\n                <ExpenceList updateSum={updateSum} getExpences={getExpences} name={currentName}/>\n            </div>                  \n        </div>\n    )\n}\n\nexport default Card; ","import React, { Component, useEffect } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\nconst Visuals = () => {\n\n    useEffect(() => {\n        let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\n\n        chart.paddingRight = 20;\n\n        // Add data\n        chart.data = [\n            {\n            \"deltagare\": \"Chrille\",\n            \"points\": 501.9\n            }, {\n            \"deltagare\": \"Ella\",\n            \"points\": 301.9\n            },\n        ];\n\n        // Add and configure Series\n        let pieSeries = chart.series.push(new am4charts.PieSeries());\n        pieSeries.dataFields.value = \"points\";\n        pieSeries.dataFields.category = \"deltagare\";\n    })\n\n  useEffect((chart) => {\n    if (chart) {\n        chart.dispose();\n      }\n  })\n\n    return (\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n    );\n}\n\nexport default Visuals;","import React from 'react';\nimport './App.css';\nimport Card from './card'\nimport bulma from 'bulma'\nimport style from './style.sass'\nimport Visuals from './visuals'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n  const [ sallary, setSallary ] = useState(0);\n  let sallaryElla;\n  let sallaryChrille; \n  \n  useEffect(() =>{\n    sallaryElla = getSallary();\n    sallaryChrille = getSallary();\n  })\n\n  const getSallary = (sallary) => {\n    const newSallary = sallary; \n    setSallary(newSallary);\n  }\n\n  return (\n    <div className=\"container has-margin-4\">\n      <p className='title is-2 has-margin-1 has-text-white has-padding-1'>The Home Economy Equalizer v2</p>\n      <div className=\"columns\">\n            <div className=\"column\">  \n               <Card name=\"Bonnie\" sallary={parseInt(sallaryElla)} getSallary={getSallary} />\n            </div>  \n            <div className=\"column\">  \n              <Card name=\"Clyde\" sallary={parseInt(sallaryChrille)} getSallary={getSallary} />\n            </div> \n      </div>\n      {/*\n        <button className=\"button\" onClick=\"\">Save to excel</button>\n        <Visuals />\n      */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport bulma from 'bulma'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}